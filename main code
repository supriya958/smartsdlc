import gradio as gr
import requests
import base64
import asyncio
import uvicorn
from threading import Thread
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware

# ====== FastAPI backend ======
app = FastAPI()

# Allow CORS so Gradio frontend can call backend from localhost
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.get("/")
async def root():
    return {"message": "Hello World"}

# Example route: /ai/upload-pdf
@app.post("/ai/upload-pdf")
async def upload_pdf(req: Request):
    data = await req.json()
    file_base64 = data.get("file_base64")
    if not file_base64:
        return JSONResponse({"error": "No file provided"}, status_code=400)
    # TODO: Process your PDF base64, do classification logic here
    classified = {
        "Phase 1": ["Requirement A", "Requirement B"],
        "Phase 2": ["Requirement C"]
    }
    return {"classified": classified}

@app.post("/ai/generate-code")
async def generate_code_endpoint(req: Request):
    data = await req.json()
    prompt = data.get("prompt")
    if not prompt:
        return JSONResponse({"error": "No prompt provided"}, status_code=400)
    # TODO: Generate code from prompt
    generated_code = f"# Code generated for prompt: {prompt}\nprint('Hello World')"
    return {"code": generated_code}

@app.post("/ai/fix-code")
async def fix_code_endpoint(req: Request):
    data = await req.json()
    code = data.get("code")
    if not code:
        return JSONResponse({"error": "No code provided"}, status_code=400)
    # TODO: Fix the buggy code and provide explanation
    fixed_code = code.replace("bug", "fix")
    explanation = "Replaced 'bug' with 'fix'"
    return {"fixed_code": fixed_code, "explanation": explanation}

@app.post("/ai/generate-tests")
async def generate_tests_endpoint(req: Request):
    data = await req.json()
    code = data.get("code")
    if not code:
        return JSONResponse({"error": "No code provided"}, status_code=400)
    # TODO: Generate test cases for given code
    tests = "def test_example():\n    assert True"
    return {"tests": tests}

@app.post("/ai/summarize")
async def summarize_endpoint(req: Request):
    data = await req.json()
    code = data.get("code")
    if not code:
        return JSONResponse({"error": "No code provided"}, status_code=400)
    # TODO: Summarize code logic here
    summary = "This function prints Hello World."
    return {"summary": summary}

@app.post("/feedback")
async def feedback_endpoint(req: Request):
    data = await req.json()
    text = data.get("text")
    if not text:
        return JSONResponse({"error": "No feedback text provided"}, status_code=400)
    # TODO: Store feedback somewhere
    return {"message": "Thanks for your feedback!"}

@app.post("/github/push")
async def github_push_endpoint(req: Request):
    data = await req.json()
    repo_url = data.get("repo_url")
    filename = data.get("filename")
    code = data.get("code")
    if not (repo_url and filename and code):
        return JSONResponse({"error": "Missing fields"}, status_code=400)
    # TODO: Push code to GitHub repo logic here
    return {"message": f"Code pushed to {repo_url} as {filename}"}

@app.post("/chat/chat")
async def chat_endpoint(req: Request):
    data = await req.json()
    query = data.get("query")
    if not query:
        return JSONResponse({"error": "No query provided"}, status_code=400)
    # TODO: Generate AI chat response here
    response = f"Echo: {query}"
    return {"response": response}

def run_uvicorn():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    config = uvicorn.Config(app, host="0.0.0.0", port=8000, log_level="info")
    server = uvicorn.Server(config)
    loop.run_until_complete(server.serve())

# ====== Gradio frontend ======
BACKEND_URL = "http://localhost:8000"

def upload_and_classify(pdf_file):
    if pdf_file is None:
        return "Please upload a PDF file."
    try:
        # pdf_file is a path string ‚Äî open the file yourself
        with open(pdf_file, "rb") as f:
            content = base64.b64encode(f.read()).decode("utf-8")
        response = requests.post(f"{BACKEND_URL}/ai/upload-pdf", json={"file_base64": content})
        if response.ok:
            classified = response.json().get("classified", {})
            result = ""
            for phase, sentences in classified.items():
                result += f"### {phase}\n" + "\n".join(f"- {s}" for s in sentences) + "\n\n"
            return result or "No classification results found."
        else:
            return f"Error in classification: {response.text}"
    except Exception as e:
        return f"Exception during classification: {str(e)}"


def generate_code(prompt):
    if not prompt:
        return "Please enter a prompt."
    try:
        res = requests.post(f"{BACKEND_URL}/ai/generate-code", json={"prompt": prompt})
        if res.ok:
            return res.json().get("code", "No code returned.")
        else:
            return f"Error generating code: {res.text}"
    except Exception as e:
        return f"Exception: {str(e)}"

def fix_code(buggy_code):
    if not buggy_code:
        return "", "Please enter buggy code."
    try:
        res = requests.post(f"{BACKEND_URL}/ai/fix-code", json={"code": buggy_code})
        if res.ok:
            data = res.json()
            return data.get("fixed_code", ""), data.get("explanation", "")
        else:
            return "", f"Error fixing code: {res.text}"
    except Exception as e:
        return "", f"Exception: {str(e)}"

def generate_tests(code):
    if not code:
        return "Please provide code to generate tests."
    try:
        res = requests.post(f"{BACKEND_URL}/ai/generate-tests", json={"code": code})
        if res.ok:
            return res.json().get("tests", "")
        else:
            return f"Error generating tests: {res.text}"
    except Exception as e:
        return f"Exception: {str(e)}"

def summarize_code(code):
    if not code:
        return "Please provide code to summarize."
    try:
        res = requests.post(f"{BACKEND_URL}/ai/summarize", json={"code": code})
        if res.ok:
            return res.json().get("summary", "")
        else:
            return f"Error summarizing code: {res.text}"
    except Exception as e:
        return f"Exception: {str(e)}"

def submit_feedback(text):
    if not text:
        return "Please enter feedback."
    try:
        res = requests.post(f"{BACKEND_URL}/feedback", json={"text": text})
        if res.ok:
            return "Thanks for your feedback!"
        else:
            return f"Error submitting feedback: {res.text}"
    except Exception as e:
        return f"Exception: {str(e)}"

def push_to_github(repo, filename, code):
    if not (repo and filename and code):
        return "Please provide all fields."
    try:
        res = requests.post(f"{BACKEND_URL}/github/push", json={
            "repo_url": repo,
            "filename": filename,
            "code": code
        })
        if res.ok:
            return res.json().get("message", "Push complete.")
        else:
            return f"Error pushing to GitHub: {res.text}"
    except Exception as e:
        return f"Exception: {str(e)}"

def chat_with_ai(query):
    if not query:
        return "Please enter a question."
    try:
        res = requests.post(f"{BACKEND_URL}/chat/chat", json={"query": query})
        if res.ok:
            return res.json().get("response", "")
        else:
            return f"Error chatting with AI: {res.text}"
    except Exception as e:
        return f"Exception: {str(e)}"

# Build Gradio UI
with gr.Blocks(title="SmartSDLC ‚Äì AI for Software Development") as demo:
    gr.Markdown("# üß† SmartSDLC\nAI-Powered Software Development Lifecycle")

    with gr.Tab("1Ô∏è‚É£ Upload & Classify"):
        pdf = gr.File(label="Upload PDF")
        classify_btn = gr.Button("Classify Requirements")
        output_classify = gr.Markdown()
        classify_btn.click(upload_and_classify, inputs=pdf, outputs=output_classify)

    with gr.Tab("2Ô∏è‚É£ Code Generator"):
        prompt = gr.Textbox(label="Describe the task", placeholder="Enter a natural language description")
        code_out = gr.Code(label="Generated Code", value="")
        gen_btn = gr.Button("Generate")
        gen_btn.click(generate_code, inputs=prompt, outputs=code_out)

    with gr.Tab("3Ô∏è‚É£ Bug Fixer"):
        buggy = gr.Code(label="Paste Buggy Code", value="")
        fixed = gr.Code(label="Fixed Code", value="")
        explanation = gr.Textbox(label="Fix Explanation", interactive=False)
        fix_btn = gr.Button("Fix Code")
        fix_btn.click(fix_code, inputs=buggy, outputs=[fixed, explanation])

    with gr.Tab("4Ô∏è‚É£ Test Case Generator"):
        test_code_input = gr.Code(label="Paste Code to Generate Tests", value="")
        test_output = gr.Code(label="Generated Tests", value="")
        test_btn = gr.Button("Generate Tests")
        test_btn.click(generate_tests, inputs=test_code_input, outputs=test_output)

    with gr.Tab("5Ô∏è‚É£ Code Summarizer"):
        summarize_input = gr.Code(label="Paste Code to Summarize", value="")
        summary_output = gr.Textbox(label="Code Summary", value="", interactive=False)
        sum_btn = gr.Button("Summarize")
        sum_btn.click(summarize_code, inputs=summarize_input, outputs=summary_output)

    with gr.Tab("6Ô∏è‚É£ Feedback Collector"):
        feedback_input = gr.Textbox(label="Share Your Experience", placeholder="Your feedback here...")
        feedback_output = gr.Textbox(label="Feedback Status", interactive=False)
        feedback_btn = gr.Button("Submit Feedback")
        feedback_btn.click(submit_feedback, inputs=feedback_input, outputs=feedback_output)

    with gr.Tab("7Ô∏è‚É£ GitHub Push"):
        repo_input = gr.Textbox(label="GitHub Repository URL", placeholder="https://github.com/username/repo.git")
        filename_input = gr.Textbox(label="Filename", placeholder="example.py")
        code_push_input = gr.Code(label="Code to Push", value="")
        github_output = gr.Textbox(label="Push Status", interactive=False)
        push_btn = gr.Button("Push to GitHub")
        push_btn.click(push_to_github, inputs=[repo_input, filename_input, code_push_input], outputs=github_output)

    with gr.Tab("8Ô∏è‚É£ AI Assistant"):
        chat_input = gr.Textbox(label="Ask a Question", placeholder="How do I write a unit test?")
        chat_output = gr.Textbox(label="AI Response", interactive=False)
        ask_btn = gr.Button("Ask")
        ask_btn.click(chat_with_ai, inputs=chat_input, outputs=chat_output)

if __name__ == "__main__":
    # Start backend server in a background thread
    backend_thread = Thread(target=run_uvicorn, daemon=True)
    backend_thread.start()

    # Start Gradio frontend (blocking)
    demo.launch()
